---
interface Props {
  es?: boolean;
  en?: boolean;
  items: any;
}

const { items = [], en, es } = Astro.props;

const chunkArray = (array, chunkSize) => {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
};

const groupedItems = chunkArray(items, 3);
---

<section class="grid-service px-2 sm:px-6" data-section="grid-service">
  {
    groupedItems.map((group) => (
      <div class="group-container flex flex-wrap gap-4">
        {group.map(({ title, service, img, link }, index) => (
          <a
            href={es ? link.es : en ? link.en : ''}
            class={`group relative h-full min-h-[15rem] sm:min-h-[19.5rem] w-full block overflow-hidden item-service item-${index + 1}`}
          >
            <div class="w-full h-full top-0 absolute left-0">
              <img
                src={img}
                alt={es ? service.es : en ? service.en : ''}
                class="w-full h-full object-cover transition duration-500 block group-hover:scale-[1.045]"
                loading="lazy"
              />
              <div class="overlay-service-bg w-full absolute bottom-0 h-[45%]" />
            </div>
            <div class="w-full h-full flex items-end relative text-center">
              <div class="w-full p-6 sm:p-8 flex flex-col items-center">
                <h4 class="text-display-sm text-white-light font-display mb-4 sm:mb-6 uppercase transition duration-500 group-hover:italic">
                  {es ? title.es : en ? title.en : ''}
                </h4>

                <h3
                  class="text-label-md transition text-primary"
                  set:html={es ? service.es : en ? service.en : ''}
                />
              </div>
            </div>
          </a>
        ))}
      </div>
    ))
  }
</section>

<style>
  section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  section > div {
    width: 100%;
    display: grid;
    grid-template-areas:
      "item-1"
      "item-2"
      "item-3";
    gap: 0.5rem;
    grid-template-columns: 1fr;
    grid-template-rows: 1.5fr 1fr 1fr;
  }

  section > div:nth-child(2) {
    grid-template-rows: 2fr 1fr 1.5fr;
  }

  section > div:nth-child(3) {
    grid-template-rows: 1fr 1fr 1.5fr;
  }

  .item-1 {
    grid-area: item-1;
  }

  .item-2 {
    grid-area: item-2;
  }

  .item-3 {
    grid-area: item-3;
  }

  .overlay-service-bg {
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0) 0%,
      rgba(34, 34, 34, 0.9) 90%
    );
  }

  .item-service{
    transform: translateY(120px);
    opacity: 0;
  }

  @media screen and (min-width: 768px) {
    section {
      gap: 1.5rem;
    }

    section > div {
      max-width: 1440px;
      margin: 0 auto;
      grid-template-areas:
        "item-1 item-1 item-2"
        "item-1 item-1 item-3";
      gap: 1.5rem;
      grid-template-columns: 1fr 1fr 1fr;
      grid-template-rows: auto;
    }

    section > div:nth-child(2) {
      grid-template-areas:
        "item-2 item-1 item-1"
        "item-3 item-1 item-1";
        grid-template-rows: auto;
    }

    section > div:nth-child(3) {
      grid-template-areas:
        "item-1 item-1 item-2"
        "item-1 item-1 item-3";
        grid-template-rows: auto;
    }
  }
</style>